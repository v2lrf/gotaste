type Address {
  # City the address is located in.
  city: String!

  # Latitude of the address.
  latitude: Float!

  # Longitude of the address.
  longitude: Float!

  # Postal code.
  postalCode: String!

  # Name of the street
  streetName: String!

  # Number of the street
  streetNumber: String!
}

# Types that has an address.
interface Addressable {
  # Address of the object.
  address: Address!
}

type Area implements Slugable {
  # Businessses in the area.
  businesses(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BusinessConnection

  # Name of the area.
  name: String!

  # A unique slug of the object.
  slug: String!
}

# The connection type for Area.
type AreaConnection {
  # A list of edges.
  edges: [AreaEdge]

  # A list of nodes.
  nodes: [Area]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type AreaEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Area
}

type Business implements Node & Addressable & Slugable {
  # Address of the object.
  address: Address!

  # Type of the business. Either a _Shop_, _Bar_ or _Restaurant_
  businessType: BusinessType!

  # Description of the business.
  description: String

  # Events hosted by the business.
  events(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # When the event begins.
    whenEventBegins: EventBeginsEnum!
  ): EventConnection

  # Cloudinary ID of the business hero image.
  heroImageId: String
  id: ID!

  # Cloudinary ID of the business logo.
  logoId: String

  # Name of the business.
  name: String!

  # Opening hours of the business.
  openingHours: [OpeningHour!]

  # A unique slug of the object.
  slug: String!
}

# The connection type for Business.
type BusinessConnection {
  # A list of edges.
  edges: [BusinessEdge]

  # A list of nodes.
  nodes: [Business]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BusinessEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Business
}

enum BusinessOrderEnum {
  # Order by the business name in an ascending order.
  NAME_ASC

  # Order by the business name in an descending order.
  NAME_DESC
}

enum BusinessType {
  # Wine shop.
  SHOP

  # Wine bar.
  BAR

  # A restaurant.
  RESTAURANT
}

type Event implements Addressable & Slugable {
  # Address of the object.
  address: Address!

  # When the event begins.
  beginsAt: ISO8601DateTime!

  # Description of the event.
  description: String

  # When the event ends.
  endsAt: ISO8601DateTime

  # Host of the event.
  host: Business!

  # Name of the event.
  name: String!

  # How much it costs to participate in the event. In DKK.
  price: Float!

  # A unique slug of the object.
  slug: String!

  # URL of where to buy a tick to the event.
  url: String
}

enum EventBeginsEnum {
  # The event has already taken place.
  PAST

  # The event is upcoming.
  UPCOMING
}

# The connection type for Event.
type EventConnection {
  # A list of edges.
  edges: [EventEdge]

  # A list of nodes.
  nodes: [Event]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The total number of events connected to the object.
  totalCount: Int!
}

# An edge in a connection.
type EventEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Event
}

enum EventOrderEnum {
  # Order by when the event begin in an ascending order.
  BEGINS_AT_ASC

  # Order by when the event begins in an descending order.
  BEGINS_AT_DESC

  # Order by the event name in an ascending order.
  NAME_ASC

  # Order by the event name begins in an descending order.
  NAME_DESC
}

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

type Mutation {
  signIn(input: SignInInput!): SignInPayload
  signUp(input: SignUpInput!): SignUpPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

type OpeningHour {
  # The time of the day the business close.
  close: String

  # Name of the day.
  dayOfWeek: String!

  # The time of the day the business opens.
  open: String
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Search for areas within a distance of a given latitude and longitude.
  areaSearch(
    # The WGS84 latitude of the area in decimal degress.Must be between 足-90 and +90.
    latitude: Float!

    # The WGS84 longitude of the area in decimal degress.Must be between 足-90 and +90.
    longitude: Float!

    # Distance in kilometers from the point.
    distance: Int

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): AreaConnection

  # Find a business by it's slug.
  business(
    # Slug of the business.
    slug: String!
  ): Business

  # Get businesses.
  businesses(
    # How to order the results.
    orderBy: BusinessOrderEnum!

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BusinessConnection

  # Find an event by it's slug.
  event(
    # Slug of the event.
    slug: String!
  ): Event

  # Find all events.
  events(
    # When the event begins.
    whenEventBegins: EventBeginsEnum!

    # How to order the results.
    orderBy: EventOrderEnum!

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EventConnection

  # Search for businesses and events within a distance of a given latitude and longitude.
  search(
    # The WGS84 latitude of the business in decimaldegress. Must be between 足-90 and +90.
    latitude: Float!

    # The WGS84 longitude of the business in decimaldegress. Must be between 足-90 and +90.
    longitude: Float!

    # Distance in kilometers from the point.
    distance: Int

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): SearchConnection

  # The signed in user.
  viewer: User
}

# Objects which may be found by search.
union Search = Business | Event

# The connection type for Search.
type SearchConnection {
  # A list of edges.
  edges: [SearchEdge]

  # A list of nodes.
  nodes: [Search]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SearchEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Search
}

# Autogenerated input type of SignIn
input SignInInput {
  email: String!
  password: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of SignIn
type SignInPayload {
  authenticationToken: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of SignUp
input SignUpInput {
  # Email used to login with.
  email: String!

  # Password used to login with.
  password: String!

  # First name of the user.
  firstName: String!

  # Last name of the user.
  lastName: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of SignUp
type SignUpPayload {
  # Authentication token for the user.
  authenticationToken: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The user who is signed up.
  user: User
}

# Types that a slug.
interface Slugable {
  # A unique slug of the object.
  slug: String!
}

type User {
  # _First name_ and the initial of the _last name_.
  shortName: String!
}

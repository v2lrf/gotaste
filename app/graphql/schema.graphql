type Area {
  # Businessses in the area.
  businesses(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BusinessConnection

  # Name of the area.
  name: String!

  # A _unique_ slug of the area.
  slug: String!
}

# The connection type for Area.
type AreaConnection {
  # A list of edges.
  edges: [AreaEdge]

  # A list of nodes.
  nodes: [Area]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type AreaEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Area
}

type Business implements Node {
  # Type of the business. Either a _Shop_, _Bar_ or _Restaurant_
  businessType: BusinessType!

  # City the business is located in.
  city: String!

  # Events hosted by the business
  events: [Event!]

  # Cloudinary ID of the business hero image.
  heroImageId: String
  id: ID!

  # Latitude of the business.
  latitude: Float!

  # Cloudinary ID of the business logo.
  logoId: String

  # Longitude of the business.
  longitude: Float!

  # Name of the business.
  name: String!

  # Opening hours of the business
  openingHours: [OpeningHour!]

  # Postal code for the business.
  postalCode: String!

  # Slug of the business.
  slug: String!

  # Name of the street where the business is located.
  streetName: String!

  # Number of the street where the business is located.
  streetNumber: String!
}

# The connection type for Business.
type BusinessConnection {
  # A list of edges.
  edges: [BusinessEdge]

  # A list of nodes.
  nodes: [Business]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BusinessEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Business
}

enum BusinessType {
  # Wine bar.
  BAR

  # A restaurant.
  RESTAURANT

  # Wine shop.
  SHOP
}

type Event {
  # When the event begins.
  beginsAt: ISO8601DateTime!

  # Description of the event.
  description: String

  # When the event ends.
  endsAt: ISO8601DateTime

  # Host of the event.
  host: Business!

  # Title of the event.
  title: String!

  # URL of where to buy a tick to the event.
  url: String
}

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

type Mutation {
  # An example field added by the generator
  testField: String!
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

type OpeningHour {
  # The time of the day the business close.
  close: String

  # Name of the day.
  dayOfWeek: String!

  # The time of the day the business opens.
  open: String
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Search for areas within a distance of a given latitude and longitude.
  areaSearch(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Distance in meters from the point.
    distance: Int

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The WGS84 latitude of the area in decimal degress.Must be between 足-90 and +90.
    latitude: Float!

    # The WGS84 longitude of the area in decimal degress.Must be between 足-90 and +90.
    longitude: Float!
  ): AreaConnection

  # Find a business by it's slug.
  business(
    # Slug of the business.
    slug: String!
  ): Business

  # Search for businesses within a distance of a given latitude and longitude.
  businessSearch(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Distance in meters from the point.
    distance: Int

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The WGS84 latitude of the business in decimaldegress. Must be between 足-90 and +90.
    latitude: Float!

    # The WGS84 longitude of the business in decimaldegress. Must be between 足-90 and +90.
    longitude: Float!
  ): BusinessConnection

  # The signed in user.
  viewer: User
}

type User {
  # _First name_ and the initial of the _last name_.
  shortName: String!
}